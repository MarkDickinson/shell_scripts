These are the changes that will be obvious to users such as display changes or
breakage of previous functionality.

For changes made under the covers not visible to users refer to the change history in
the bash script files, and for new parameters the documentation and example ALL.custom
file provided.

From 0.14 onward changes that can cause problems with a newer processing script
version processing collected data files from prior versions will not be documented,
it is recomended that when upgrading between versions you also perform captures
with the new version. As each new release is produced more and more code used
for backward compatability will be removed plus any new checks implemented will
be permitted to alert if older capture files are used rather than add new coding
for backward compatability. Simply always use the same versions.

-------------------------------------------------------------------------------------
Noteable changes implemented between version 0.14 and version 0.15 are
-------------------------------------------------------------------------------------
main index page changes
(1) Changes made only affect the main index page produced by the processing script,
    and will result in a noticably slower rebuild of the main index page if there
    are alerts for a server.
    Configuration file changes are only needed for those using the custom file
    parameter EXACT_ALERT_REASON introduced in version 0.14
    The expected alerts parameter EXACT_ALERT_REASON handling has changed, now
    the reason must exactly match the text of a real alert.
    The link in the index page that used to show the expected alert parameters
    still shows those, but it also now lists all alerts that may be matched plus
    the alerts that did actually match. Note: only selected alerts can be matched
    this way (critical alerts for things such as network and cron cannot be matched
    as these must be fixed rather than documeneted as being expected)
    Also the checks for EXACT_ALERT_REASON handling will now only be performed if
    there are no more than thirty alerts for a server (and I may lower that in
    the next release).

additional checks added
(2) User authorized_keys files are now searched for and reported on in new
    Appendix K. New appendix only produced if those files exist on the server.

-------------------------------------------------------------------------------------
Noteable changes implemented between version 0.13 and version 0.14 are
-------------------------------------------------------------------------------------
(1) Main index page display changes and specifying expected alerts
    If alert count for a server is 0 that total will show in green text on the main
    index. Additional custom file parameter added to specify an alert that is
    expected that is considered OK which will also show the alert total for a server
    in green text on the main index page if the total of the expected alerts
    match the number of alerts; this parameter is added for servers that
    will have known issues that will never be fixed such as debian based servers
    always reporting password minlen is 0 (until I figure out how to obtain it) and
    openindianna/solaris servers reporting there is no firewall installed (as they use
    ipfilter and I have only coded checks for iptables and netfilter which are all
    I care about at the moment). HOWEVER unless you have a good reason, such as examples
    mentioned, you should not use the new parameter but strive for zero alerts which
    is easily possible on RHEL based systems using existing parameters in this toolkilt.
    If the new parameter is used you must provide N reson text entries to match the
    expected N alert counts which will be made available as a link from the index
(2) Now checks are done to see if subsystems are configured in sshd_config and an
    alert raised for each one configured. A customfile parameter can be used to
    downgrade the alert to a warning. On servers managed by ansible which must
    have the sftp subsystem available an additional customfile parameter is provided
    to downgrade the warning to OK only if the subsystem is named sftp.

-------------------------------------------------------------------------------------
Noteable changes implemented between version 0.12 and version 0.13 are
IMPORTANT: backward compatibility for crontab checks made by collector versions
           prior to 0.13 is not provided. You must use the latest collector on
           all servers.
-------------------------------------------------------------------------------------
(1) *important* changes in crontab handling have been made, if you upgrade to
    processing version 0.13 you must use data collection files collected by
    version 0.13; I chose not to provide backward compability for the cron 
    section of the report. The effect of using an old version of the collector
    is that no crontab entries will be reported on when processed
(2) Not using at.allow/at.deny on the server will now alert
(3) Allow suppression of suid file alerts for the files installed as snap packages
    on Ubuntu that come bundled with thier own copy of system files

-------------------------------------------------------------------------------------
Noteable changes implemented between version 0.11 and version 0.12 are
-------------------------------------------------------------------------------------
(1) If both netfilter and iptables are in use raise a warning (in 0.11 was an alert)
(2) New customfile parm REFRESH_INTERVAL_EXPECTED=nn which is an enhancement to
    change '2' for version 0.11 so custom files can override the default of 14 days
    being used to mark a servers collected data as obsolete. As each server can now
    have a different value the value used is shown on the main index display next
    to the snapshot data capture date.
(3) Lots of additional new custom file entries created/managed to suppress more
    alerts users will never bother to fix (such as system users with non-existing home directories),
    examples in ALL.custom and documentation html file has been updated, refer to those
(4) New customfile sanity check, users in the system file owner list (parm ADD_SYSTEM_FILE_OWNER)
    that do not exist on the server being checked now alert as obsolete entries
    that need to be removed from the custom file
(5) IMPORTANT: the default list of users than can own system files has been shortened to
    "root bin lp tss" so you will have to make use of the ADD_SYSTEM_FILE_OWNER custom
    file parameter to define others depending on what packages you have installed.
    reason: point 6 above, with a long default list a long list of alerts
(6) the collector scriot now takes a noticable longer run time, as it collects
    additional info such as searching for and recording orphaned files under
    specific directories (system directories and /home), the
    0.12 processing script will produce an extra 'appendix j' if orphaned
    files or directories are found

-------------------------------------------------------------------------------------
Noteable changes implemented between version 0.10 and version 0.11 are
-------------------------------------------------------------------------------------
main change
(1) netfilter checks now match iptables checks for configured open port checks,
    no longer a beta 'fix' for f32/rhel8 firewalld changes but a working solution

other visible changes
(2) main index now highlights any servers with collected data files over 14 days old
(3) not a change but a note: on servers with both iptables and netfilter in use
    different ports may be opened on each. Normally with firewalld since F32/RHEL8
    using netfilter instead of iptabled there would be an empty iptables ruleset
    but some applications (such as docker-ce) will populate both iptables and
    netfilter rules so the reports produced by the script can show more ports
    open in netfilter than iptables in that case. That is normal but highlighted
    here as it will show up in the reports. Also an alert will be raised if both
    iptables and netfilter are installed.

-------------------------------------------------------------------------------------
Noteable changes implemented between version 0.09 and version 0.10 are
-------------------------------------------------------------------------------------
collection script changes
(1) Bugfix: the test by grep for "\-c" on a crontab line (testing for syntax such
    as 'sh -c "command"' has been changed to "\ \-c\ " to ensure there is a space
    on either side of the -c. It was unfortunately matching on script names with
    -c (such as /home/mark/cron_jobs/list-changes). Also made that test on the
    first few fields of the command instead of the entire crintab line to avoid
    it matching if any commands had a aparemetr of -c.

feature enhancements
(2) new processing option --indexkernel=yes|no added for my use; default is 'no' to
    ensure users notice no difference by default. If it is used then on the main
    index page the kernel version running on each server is also displayed. Added
    for my use so I could see at a glance what servers were not running the 
    latest kernel. (Tip: I use it in conjunction with the --indexonly option to
    quickly switch between the two index displays as needed, as I prefer the default
    of not displaying it in most cases).
(3) new custom file parameter to identify a firewall port as an outbound port rule,
    so a firewall rule for the port does not alert if no local listening process
    has the port open

>>>BETA<<< feature enhancements
(4) Fedora32/CentOS8/RHEL8 have all changed the way firewalld behaves in that on those
    (and presumably any future releases) firewalld has changed from using iptables to netfilter
    rules as a backend to firewalld. This means that on systems using firewalld the
    existing firewall checks that expect iptables no longer work as iptables will
    always show 'accept' on everything.
    Initial BETA changes have been made to try to accomodate that change and at least
    provide some checking to provide initial reporting in a format that matches
    the existing iptables checks.

-------------------------------------------------------------------------------------
Noteable changes implemented between version 0.08 and version 0.09 are
-------------------------------------------------------------------------------------
collection script changes
(1) the collection script parameters --backup-etc and --record-packages have had
    the defaults changed from yes to no. A personal preference as I was not yet
    doing anything with that data collected. If you want the data any scripts
    you run from cron (or other schedulers) will have to be updated to now
    provide these options.

new custom file parameters
(2) SUID_SUPPRESS_DOCKER_OVERLAYS=yes
    Yes I got sick of them generating alerts in the reports. If this parameter is
    added to the customisation file for a server alerts will no longer be raised
    for SUID files under the /var/lib/docker/overlay2 filesystem path which contains
    SUID files created for docker containers in directories named for the
    running container id (or more simply, random so always raised unexpected suid
    file alerts. Instead the report will now just say nnn alerts for docker suid files
    suppressed and provide a link to a new page listing all the files that were
    suppressed from the report.
    It only suppressed alerts for files under /var/lib/docker/overlay2, if used
    it has no effect on the reporting for other files.

-------------------------------------------------------------------------------------
Noteable changes implemented between version 0.07 and version 0.08 are
-------------------------------------------------------------------------------------
Changes between the two releases are feature enhancements and the obsoleting of 
old custom file parameters previously retained for backward compatibility.
NOTE: customisation file parameter changes require you to update customisation
      files if you use any of the changed parameters in (1) or (2), you should
      have already made changes needed for (3) as 0.07 reported the need for those.

changes to existing custom file parameters
(1) The custom file parameter FORCE_PERM_OK=/path/to/file has been changed to be
    FORCE_PERM_OK=/path/to/file:exactperm where exactperm must be the actual
    file permission expected
    Using the old format (without the :exactperm) will result in the custom file
    entry being ignored so if you used it you will get alerts for the file
    until you update the custom file
(2) The custom file parameter FORCE_OWNER_OK=/path/to/file has been changed to be
    FORCE_OWNER_OK=/path/to/file:userid where userid must be the actual userid
    that owns the file
    Using the old format (without the :userid) will result in the custom file
    entry being ignored so if you used it you will get alerts for the file
    until you update the custom file
(3) version 0.07 has been warning users custom file network parms will be obsoleted
    in 0.08 and users need to update their custom files. The 0.06 and lower parms 
    are now no longer supported

feature enhancements
(4) new processing option '--clearlock' is provided. If you ctrl-C or reboot during 
    processing a logical lockfile will be left behind preventing any further
    processing, this can be used to remove it, if no running process is using the pid
(5) MAJOR NEW FEATURE added a seperate appendix for firewall port checking to report on
    open inbound firewall ports [firewalld and iptables] if iptables is installed on the
    server which are checked against ports that are actualy in use on the server to 
    identify obsolete filewall rules (traffic allowed to a port but the server is not
    using the port). Many servers by default accept everything relying on external
    firewalls so this new report is not necesarily useful there but if you do use
    a firewall on the server itself this is very useful
(6) to fill the gap between all server processing and single server processing a
    new parameter --checkchanged=list|process can be used to list or process
    all datafiles captured and placed in the --datadir directory since the
    server associated with the datafile was last processed. As well as the
    --checkchanged=list option the main index page highlights servers that need
    re-processing for this reason (of course only after a server is processed 
    to refresh the index or a '--indexonly' exection is preformed to rebuild the
    index)
(7) primarily for my use, the collector has a new --webpathlist=/some/file which
    refers to a file containing a list of filesystem paths under which all files
    can be considered static or seldom changing webserver served files that should
    all be read-only. If this option is used on a server when collecting info the
    processing script will automatically process the entries and generate a
    report page for this. If used the server custom file should contain new
    entries ADD_WEBSERVER_FILE_OWNER=userid for each user that owns the files,
    if not provided the default 'apache' will be the only user permitted to own the
    files
(8) main index page - when a single server or 'changed' server processing run is
    done the main index shows the server as 'being processed' insead of the old
    information (if it had already been processed in the past and had a main index
    page entry); for full processing instead of no main index.html until processing
    completes the main index is updated as each server is processed so the user
    has a page with a growing list of server results instead of a page not found

-------------------------------------------------------------------------------------
Noteable changes implemented between version 0.06 and version 0.07 are
-------------------------------------------------------------------------------------
Changes between these two releases is primarily to enhance the data captured to
permit features added in 0.06 to be fully utilised.

open network port checks report
(1) collection script:remove requirement for fuser, use a combination of netstat
   output and ps instead as this will capture info that fuser simply could not
(2) collection script:major internal parameter changes to get better
   isolation between data types, this means old collector datafiles
   are not supported so all servers collection scripts must be
   updated and collection run to obtain the new formats
(3) processing script: changed to use the new format collection variables,
   if process info not available falls back to the truncated details
   obtained by netstat
(4) processing script:now we can get process details on raw ports
   implement 'process match ok' and 'port ok' overrides for raw ports
   (identical custom parameters as those for current tcp and udp checks)
(5) processing script: with the above changes we can now report on what 
    processes are using all the unix sockets rather than just listening ones,
    so we do

-------------------------------------------------------------------------------------
Noteable changes implemented between version 0.05 and version 0.06 are
-------------------------------------------------------------------------------------
Changes between these two releases were 'feature' additions.

bug fixes
(1)  processing script:checks added for mail files in 0.05 were inserted in the wrong place,
     those suppressions were being added to the totals of the groupsuppress count ( fixed )
(2)  collection script:was not handling quotes around crontab commands in lines with
     'shell -c' commands when checking job script permissions, now handles those ( fixed )

global - affecting main index page
(3)  collection script: change capture date format from server default to "YYYY/MM/DD HH:MM"
     to make the display size much smaller on the main index page and a fixed size
(4)  processing script: include a processed date column on the main index page, needed now
     individual servers can be processed to indicate if many have not been processed in a while

cron job check enhancements
(5)  collection script:remove attempts to record commands run by anacron files, as they never
     worked and it is too complex for now 
(6)  collection script:check for and record entries in cron.deny and cron.allow 
(7)  collection script:record entries cron job entries we were unable to perform file security
     checks against (due to crontab entry command stacking etc)
(8)  processing script:raise alerts/warnings as appropriate depending on use of cron.deny and
     cron.deny by the server 
(9)  processing script:raise warnings for cron job entries we were unable to perform file security
     checks against (due to crontab entry command stacking etc)

filesystem checks report
(10) processing script:when files are suppressed from the report totals (specifically if group
     write is allowed under /var) add an additional link on the filesystem check page to a page
     where users can see exactly what files were suppressed
(11) processing script:add execeptions for files in /var/spool/cron which can be owned by any
     user existing on the system if they are permitted to use cron and the filename is the
     username, they should not be alerted on

open network port checks report
(12) collection script:for open port details on servers with fuser installed also use
     fuser -n tcp/udp and ps to actually obtain the process listening on the port. The main
     reason for this is to be aware of what processes are litening on a port in cases where
     they cannot be configured to a specific port (for example rpcbind uses random ports so
     cannot be configured as an OK listener currently
(13) collection script: use fuser to report on what process is using a unix socket
(14) collection script: also report on what 'raw' network sockets are in use
     the existing tcp/udp/unix) although alas fuser cannot query what is using them
(15) processing script: use the details from the updated collection script to identify what is
     listening on an unexpected port rather than rely on /etc/services descriptions, still
     allow a user description to be included where provided for known ports. Must still be able
     to handle output from prior collector versions and servers without fuser installed so
     existing processing will be enhanced if additional data is present but old method still
     available as fallback which means we still need to capture the services file entries
(16) processing script:add a new custom file parameter to force a "permitted" process listening
     on an unexpected tcp/udp port into an OK state if using the a new version collector
     produced datafile. This will handle situations such as rpcbind using random ports
(17) processing script:add a new custom file parameter to allow configured network ports
     listening on all interfaces to be considered OK rather than a warning, not a global but
     on a per port basis as listening on all interfaces is insecure but some applications
     require it so this will allow known applications to be forced OK
(18) alter custom file parameters that allow tcp/udp ports to be version specific, in 0.05 and
     below an allow udp 53 would allow both udpv4 53 and udpv6 53 to be valid. This change
     will tighten that up. This change now will also generate a warning alert if the old obsolete
     parameters are used plus also write a list of all server custom files using the old
     parameters on the global results index page

-------------------------------------------------------------------------------------
Older version change history removed as obsolete. Older versions should not be in use
-------------------------------------------------------------------------------------
