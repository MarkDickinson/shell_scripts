Known issues with the current release
=====================================
* Nowhere in the directory path of the processing script can there be an underscore</b> ( _ )
  character used, the underscore character is used by the script for parsing and having it
  in the directory path will cause problems. Not really an issue, just do not do it
* if you ^C or kill a running processing scriot the lockfile remains, you must use the
  processing script --clearlock option to remove it. However a lockfile is required as we
  do not want to permit batch and interactive runs to conflict; and if you have a lot
  of servers a full run may take over 24hrs (althought will take a few hundred servers
  and you should have split out processing by then).
  Maybe one day if there are enough complaints I will implement a trap handler, but I
  do not consider this a bug 
* reprocessing logic skip, when a single server is selected for processing any additional
  servers are also selected to be reprocessed if they must be including for processing
  version changes, OK as interactive. This has been deliberately skipped in the checkchanged
  procesing and only collected data files with newer timestamps are processed, the reason
  is that checkchanged is for batch where you want to automatically process a few files
  per day and you do not want all servers to suddenly be reprocessed on a processing script
  version change... this is not an issue but a design and is mentioned as it differs from
  the normal behaviour. If you are batching grouos of servers to be processed they will
  all eventually be precessed by the latest version and you can always manually do a 
  full processing run if needed
* cron job checks - only cron jobs have securiry permissions checked, not anacron files
  or any queued 'at' jobs
* cron job checks - stacked commands are able to be tested if seperated by ';' '&&' '|',
  the '||' syntax is not supported yet.
* cron job checks - where a cron job uses a system command (echo, cd, php) rather than
  a discrete script an alert will normally be raised as system commands are normally owned
  by root and not the owner of the cron job. A list of commands considered to be non-disruptive
  can be used to suppress alerts for things like 'echo', 'php', 'bash' etc. to allow those
  to be used without alerting; although commands such as 'ls', 'cd', 'find' etc. will
  always alert as there is no way of determing what environment a stacked crontab command
  line has obtained if it is using combinations of these. These are 'hard coded' in the
  collection script (as custom files are used only by the processing script which runs on
  a seperate server so cannot be used by the collection script). If you wish to alter the
  defaults search in the collection script for CRON_CMD_IGNORE_LIST, CRON_CMD_SHELL_LIST,
  CRON_CMD_FATAL_LIST strings and update those. Note: for files of this type not common
  across all servers a custom file entry can be added to allow them to be OK if they
  are owned by root (as all system utilities must be owned by root)
* user checks - system defaults for max password length and expiry checks are
  obtained from /etc/login.defs; An uncommented minlen value is also searched for in pwquality.conf
  and any files in the pwquality.conf.d directory as PAM systems would use this in preference
  on Fedora/CentOS/RHEL systems. _On Ubuntu servers comments in login.defs indicate minlen
  is set in files in /etc/pam.d but as I can find no examples of this Ubuntu servers will
  always raise an alert saying minlen is 0_ which as I don't use Ubuntu other than testing
  this script so am unlikely to spend time resolving.
  Commented values would be ignored so ensure they are set. authconfig is depreciated on fedora in favor of authselect
  and god knows what tools ubuntu use so as every system will have different management tools
  cannot use those to query values so rely
  on values set in the files _and ignore commented defaults_ as defaults change
* server firewall rule checks - no attempt is made to follow firewall chains or determine zones,
  any rule to open a port is considered an open port
* servers running NetworkManager will have firewall ports opened that users may not expect,
  _This is not an issue with this toolkit_ but
  with a lack of control over what NetworkManager decides to open; prior to version 0.12 any
  firewall accept rule for a port not in use alerted as an obsolete firewall rule, from
  0.12 onward a custom file rule can be used to identify and downgrade alerts to warnings for ports opened
  by NetworkManager rather than ports you explicitly configured.
  Examples: 'firewall-cmd --list-ervices' shows 'cockpit dhcpv6-client dns http ntp ssh' and
  'firewall-cmd --list-ports' does not show the following ports,
  but the following ports have firewall rules opening the ports, udp 67(/usr/lib/firewalld/services/dhcp.xml),
  udp 68(/usr/lib/firewalld/services/RH-Satellite-6.xml),udp 69(/usr/lib/firewalld/services/tftp.xml);
  _and worse_ some processes that use dynamic ports will occasionally use those ports so unexpected apps are exposed
* BUG: when processing a capture with a large number of files _SOMETIMES_ an error is thrown
  "bin/process_server_details.sh: line 4422: ----------------------------------: command not found"
  which is not the contents of line 4422. A rerun with no changes does not have the same issue.
  Ocurrence is completely random so hard to track down. Does not affect any results produced
* Only handles simple firewall rules. Does not handle complex firewall rules such as the
  iptables entries below 
      multiport dports 8773,8774,8775,8778 /* 001 nova api
      multiport dports 5900:5999 /* 001 nova compute
      multiport dports 16509,49152:49215 /* 001 nova qemu

